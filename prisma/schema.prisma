generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Document      Document[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum DocumentType {
  temp
  perma
}

model Document {
  id        String   @id @unique @default(uuid())
  title     String   @default("Untitled")
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  // accepted Boolean @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  type DocumentType @default(perma)

  history History[]

  @@map("document")
}

model History {
  id      String @id @default(uuid())
  prompt  String
  content String

  createdAt DateTime @default(now())

  docId    String
  type     HistoryType @default(text)
  document Document    @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@map("history")
}

enum HistoryType {
  text
  chart
  reactive
}
